#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    
    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;
    Node nodes[5];
    int nodeCount;
    
public:
    LinkedList() : head(nullptr), nodeCount(0) {}
    
    void insertAtEnd(int value) {
        if (nodeCount >= 5) {
            cout << "Maximum nodes reached!" << endl;
            return;
        }
        nodes[nodeCount] = Node(value);
        
        if (head == nullptr) {
            head = &nodes[nodeCount];
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = &nodes[nodeCount];
        }
        nodeCount++;
    }
    
    int findMiddle() {
        if (head == nullptr) {
            return -1;
        }
        
        Node* slow = head;
        Node* fast = head;
        
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return slow->data;
    }
    
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
};

int main() {
    LinkedList list;
    
    // Create the linked list: 1->2->3->4->5
    list.insertAtEnd(1);
    list.insertAtEnd(2);
    list.insertAtEnd(3);
    list.insertAtEnd(4);
    list.insertAtEnd(5);
    
    cout << "Linked List: ";
    list.display();
    
    int middle = list.findMiddle();
    cout << "Middle element: " << middle << endl;
    
    return 0;
}
