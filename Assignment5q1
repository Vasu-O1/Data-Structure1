#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    
    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;
    Node nodes[100];
    int nodeCount;
    
public:
    LinkedList() : head(nullptr), nodeCount(0) {}
    
    void insertAtBeginning(int value) {
        if (nodeCount >= 100) {
            cout << "Maximum nodes reached!" << endl;
            return;
        }
        nodes[nodeCount] = Node(value);
        nodes[nodeCount].next = head;
        head = &nodes[nodeCount];
        nodeCount++;
        cout << "Node inserted at beginning successfully." << endl;
    }
    
    void insertAtEnd(int value) {
        if (nodeCount >= 100) {
            cout << "Maximum nodes reached!" << endl;
            return;
        }
        nodes[nodeCount] = Node(value);
        
        if (head == nullptr) {
            head = &nodes[nodeCount];
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = &nodes[nodeCount];
        }
        nodeCount++;
        cout << "Node inserted at end successfully." << endl;
    }
    
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty. Nothing to delete." << endl;
            return;
        }
        head = head->next;
        cout << "Node deleted from beginning successfully." << endl;
    }
    
    void deleteFromEnd() {
        if (head == nullptr) {
            cout << "List is empty. Nothing to delete." << endl;
            return;
        }
        
        if (head->next == nullptr) {
            head = nullptr;
        } else {
            Node* temp = head;
            while (temp->next->next != nullptr) {
                temp = temp->next;
            }
            temp->next = nullptr;
        }
        cout << "Node deleted from end successfully." << endl;
    }
    
    void display() {
        if (head == nullptr) {
            cout << "List is empty." << endl;
            return;
        }
        
        Node* temp = head;
        cout << "Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
};

int main() {
    LinkedList list;
    int choice, value;
    
    while (true) {
        cout << "\nSingly Linked List Operations:" << endl;
        cout << "1. Insert at beginning" << endl;
        cout << "2. Insert at end" << endl;
        cout << "3. Delete from beginning" << endl;
        cout << "4. Delete from end" << endl;
        cout << "5. Display all nodes" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        
        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                list.insertAtBeginning(value);
                break;
            case 2:
                cout << "Enter value to insert: ";
                cin >> value;
                list.insertAtEnd(value);
                break;
            case 3:
                list.deleteFromBeginning();
                break;
            case 4:
                list.deleteFromEnd();
                break;
            case 5:
                list.display();
                break;
            case 6:
                cout << "Exiting program." << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
}
